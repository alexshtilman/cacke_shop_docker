version: "3.7"
services:
  registry:
    image: registry
    ports:
      - "5001:5000"
    volumes:
      - ${HOME}/cake_shop_registry/:/var/lib/registry
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    networks:
      - frontend
      - backend
  client:
    build:
      context: ../cake_shop_frontend_react_rest
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    networks:
      - frontend
    depends_on:
      - api
      - registry
    deploy:
      placement:
        constraints: [node.role == manager]
  api:
    build:
      context: ../cake_shop_backend_flask_rest
      dockerfile: Dockerfile
    command: gunicorn --bind 0.0.0.0:5000 main:app
    ports:
      - 5000:5000
    deploy:
      placement:
        constraints: [node.role == manager]
    environment:
      POSTGRES_PASSWORD: my_password
      POSTGRES_USER: cake_shop_admin
      POSTGRES_DB: cake_shop
      DB_SERVER_NAME: db
      JWT_SECRET_KEY: my_secret_key
      SETUP_KEY: my_setup_key
      FLASK_ENV: production
    volumes:
      - appdata:/var/www/
    networks:
      - frontend
      - backend
    depends_on:
      - db
      - registry
  db:
    image: postgres
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_PASSWORD: my_password
      POSTGRES_USER: cake_shop_admin
      POSTGRES_DB: cake_shop
    volumes:
      - ${HOME}/volumes/cake_shop/:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]
  db_admin:
    image: dpage/pgadmin4
    ports:
      - "80:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.local
      PGADMIN_DEFAULT_PASSWORD: my_password
    networks:
      - backend
    depends_on:
      - db
    deploy:
      placement:
        constraints: [node.role == manager]
  visualizer:
    image: dockersamples/visualizer
    ports:
      - "8080:8080"
    stop_grace_period: 1m30s
    networks:
      - frontend
      - backend
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
networks:
  frontend:
    driver: overlay
  backend:
    driver: overlay
volumes:
  appdata:
    driver: local
